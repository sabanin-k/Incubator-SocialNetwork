{"version":3,"file":"static/js/423.b8c88749.chunk.js","mappings":"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","sources":["store/selectors/chatSelector.ts","webpack://kamas/./src/pages/ChatPage/InputMessage/InputMessages.module.css?da36","pages/ChatPage/InputMessage/InputMessage.tsx","webpack://kamas/./src/pages/ChatPage/Messages/Messages.module.css?8abf","pages/ChatPage/Messages/Messages.tsx","pages/ChatPage/ChatPage.tsx"],"sourcesContent":["import { TGlobalState } from \"../reduxStore\"\r\n\r\nexport const getChatMessagesSelector = (state: TGlobalState) => state.chat.messages\r\nexport const getChatConnectStatusSelector = (state: TGlobalState) => state.chat.connectStatus\r\nexport const isFetchingSelector = (state: TGlobalState) => state.chat.isFetching","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"InputMessages_wrapper__QV6Sl\",\"textarea\":\"InputMessages_textarea__-z9A1\"};","import React, { FC, useEffect, useState } from 'react'\r\nimport { TStatus } from '../../../api/wsAPI'\r\nimport styles from './InputMessages.module.css'\r\n\r\nexport const InputMessage: FC<TProps> = ({ handleSendMessage, connectStatus }) => {\r\n    const [value, setValue] = useState('')\r\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => setValue(e.target.value)\r\n    const handleSend = () => {\r\n        handleSendMessage(value)\r\n        setValue('')\r\n    }\r\n    const keyListener = (e: KeyboardEvent) => {\r\n        if (e.ctrlKey && e.code === 'Enter') {\r\n            value.length !== 0 && handleSend()\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        const textarea = document.getElementById('textarea')\r\n        textarea.addEventListener('keydown', keyListener)\r\n        return () => textarea.removeEventListener('keydown', keyListener)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [value])\r\n    \r\n    return <div className={styles.wrapper}>\r\n        <textarea value={value} onChange={handleChange} className={styles.textarea} placeholder='Начни писать...' id='textarea' />\r\n        <button disabled={connectStatus === 'connecting' || value.length === 0 } onClick={handleSend} className={styles.button}>\r\n            { connectStatus === 'connecting'\r\n                ? 'Загрузка...'\r\n                : value.length === 0\r\n                    ? 'Пусто'\r\n                    : 'Отправить' }\r\n            </button>\r\n    </div>\r\n}\r\n\r\n\r\ntype TProps = { \r\n    connectStatus: TStatus\r\n    handleSendMessage: (message: string) => void\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__rACvG\",\"wrapper\":\"Messages_wrapper__7zJaQ\",\"photo\":\"Messages_photo__FXBKR\",\"name\":\"Messages_name__ciu+K\",\"message\":\"Messages_message__CNk5T\",\"plug\":\"Messages_plug__Kj8Tl\"};","import React, { FC, useEffect, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { TMessages } from '../../../api/wsAPI'\r\nimport userImage from '../../../assets/images/user.png'\r\nimport styles from './Messages.module.css'\r\n\r\nexport const Messages: FC<TProps> = ({ messages }) => {\r\n    const divRef = useRef(null)\r\n\r\n    // НИ ЭТОТ, НИ ВТОРОЙ СКРОЛЛЫ НЕ СПУСКАЮТСЯ ДО САМОГО НИЗА И ОНИ МЕНЯ ЗАЕБАЛИ УЖЕ. ПОШЕЛ НАХУЙ, СКРОЛЛ!\r\n    // UPD: Скролл ломался из-за размера аватарок, снизил с 50px до 30 - заработало\r\n    \r\n    // const scrollToBottom = () => {\r\n    //     divRef.current?.scrollIntoView({ block: 'end' })\r\n    // }\r\n    const scrollToBottom = () => {\r\n        const scrolledDiv = document.getElementById('scrolledDiv')\r\n        scrolledDiv.scrollTo({ top: scrolledDiv.scrollHeight })\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    }, [messages])\r\n\r\n    return <>\r\n        <div className={styles.messages} id='scrolledDiv'>\r\n            {messages !== null && messages.length !== 0\r\n                ? messages.map((m, i) => {\r\n                    return <div key={i} className={styles.wrapper} >\r\n                        <div className={styles.photoWrapper}>\r\n                            <Link to={'/users/' + m.userId}>\r\n                                {m.photo\r\n                                    ? <img src={m.photo} alt={m.userName} className={styles.photo} />\r\n                                    : <img src={userImage} alt={m.userName} className={styles.photo} />}\r\n                            </Link>\r\n                        </div>\r\n                        <div className={styles.messageWrapper}>\r\n                            <p className={styles.name}>{m.userName}</p>\r\n                            <p className={styles.message}>{m.message}</p>\r\n                        </div>\r\n                    </div>\r\n                })\r\n                : <p className={styles.plug}>Нет сообщений</p>}\r\n            <div ref={divRef}></div> {/* for autosrolling to this div */}\r\n        </div>\r\n    </>\r\n}\r\n\r\n\r\ntype TProps = { messages: TMessages[] }","import React, { FC, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Preloader } from '../../components/common/Preloader/Preloader'\r\nimport { sendMessage, startChatListener, stopChatListener } from '../../store/reducers/chatReducer'\r\nimport { getIsLogged } from '../../store/selectors/authSelector'\r\nimport { getChatConnectStatusSelector, getChatMessagesSelector, isFetchingSelector } from '../../store/selectors/chatSelector'\r\nimport { InputMessage } from './InputMessage/InputMessage'\r\nimport { Messages } from './Messages/Messages'\r\n\r\nconst ChatPage: FC = () => {\r\n    const messages = useSelector(getChatMessagesSelector)\r\n    const isLogged = useSelector(getIsLogged)\r\n    const isFetching = useSelector(isFetchingSelector)\r\n    const connectStatus = useSelector(getChatConnectStatusSelector)\r\n    const dispatch = useDispatch()\r\n    const handleSendMessage = (message: string) => {\r\n        dispatch(sendMessage(message))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(startChatListener())\r\n        return () => {\r\n            dispatch(stopChatListener())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            {isFetching\r\n                ? <Preloader />\r\n                : <Messages messages={messages} /> }\r\n            {isLogged && <InputMessage handleSendMessage={handleSendMessage} connectStatus={connectStatus} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"names":["getChatMessagesSelector","state","chat","messages","getChatConnectStatusSelector","connectStatus","isFetchingSelector","isFetching","InputMessage","handleSendMessage","useState","value","setValue","handleSend","keyListener","e","ctrlKey","code","length","useEffect","textarea","document","getElementById","addEventListener","removeEventListener","className","styles","onChange","target","placeholder","id","disabled","onClick","Messages","divRef","useRef","scrolledDiv","scrollTo","top","scrollHeight","scrollToBottom","map","m","i","to","userId","photo","src","alt","userName","userImage","message","ref","useSelector","isLogged","getIsLogged","dispatch","useDispatch","startChatListener","stopChatListener","Preloader","sendMessage"],"sourceRoot":""}