{"version":3,"file":"static/js/120.1b2b68a9.chunk.js","mappings":"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","sources":["webpack://kamas/./src/pages/Dialogs/InputField/InputField.module.css?06c8","pages/Dialogs/InputField/InputField.tsx","webpack://kamas/./src/pages/Dialogs/Messages/Messages.module.css?5db9","pages/Dialogs/Messages/Messages.tsx","webpack://kamas/./src/pages/Dialogs/Opponents/Opponents.module.css?7b07","pages/Dialogs/Opponents/Opponents.tsx","webpack://kamas/./src/pages/Dialogs/Dialogs.module.css?3e4e","pages/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"InputField_form__QxXTN\",\"input\":\"InputField_input__T2e-L\",\"button\":\"InputField_button__4qMF7\"};","import { Field, Form, Formik } from \"formik\";\r\nimport React, { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TOpponent } from \"../../../api/dialogsAPI\";\r\nimport { sendMessage } from \"../../../store/reducers/dialogsReducer\";\r\nimport styles from \"./InputField.module.css\";\r\n\r\nexport const InputField: FC<TProps> = ({ currentOpponent }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                textarea: ''\r\n            }}\r\n            onSubmit={(values, { resetForm }) => {\r\n                dispatch(sendMessage(currentOpponent.id, values.textarea))\r\n                resetForm({})\r\n            }}>\r\n            {currentOpponent.id\r\n                && <Form className={styles.form}>\r\n                    <Field\r\n                        type='textarea'\r\n                        name='textarea'\r\n                        placeholder=\"Введите сообщение\"\r\n                        className={styles.input} />\r\n                    <button type='submit' className={styles.button}>Отправить</button>\r\n                </Form>}\r\n        </Formik>\r\n    )\r\n}\r\n\r\n\r\ntype TProps = {\r\n    currentOpponent: TOpponent\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Messages_wrapper__tZqw2\",\"messageWrapper\":\"Messages_messageWrapper__XLm8t\",\"message\":\"Messages_message__-ZpGn\",\"photo\":\"Messages_photo__YU8Ua\",\"senderName\":\"Messages_senderName__H5XSk\",\"chooseOpponent\":\"Messages_chooseOpponent__OHDo0\"};","import React, { FC, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TOpponent, TOpponentMessages } from \"../../../api/dialogsAPI\";\r\nimport { TUserProfile } from \"../../../types/types\";\r\nimport userImage from '../../../assets/images/user.png';\r\nimport styles from './Messages.module.css';\r\n\r\nexport const Messages: FC<TProps> = ({ messages, currentOpponent, authProfile }) => {\r\n    const divRef = useRef(null)\r\n\r\n    const scrollToBottom = () => {\r\n        divRef.current?.scrollIntoView(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    }, [messages])\r\n\r\n    return <div className={styles.wrapper}>\r\n        {currentOpponent.id\r\n            ? messages.map(m => {\r\n                return <div key={m.id} className={styles.messageWrapper}>\r\n                    <div className={styles.photoWrapper}>\r\n                        <Link to={`/users/${m.senderId}`}>\r\n                            <img\r\n                                src={currentOpponent.id === m.senderId\r\n                                    ? currentOpponent.photos.small || userImage\r\n                                    : authProfile.photos.small || userImage}\r\n                                alt='фото пользователя'\r\n                                width='30px'\r\n                                className={styles.photo}\r\n                            />\r\n                        </Link>\r\n                    </div>\r\n                    <div>\r\n                        <p className={styles.senderName}>{m.senderName}</p>\r\n                        <p className={styles.message}>{m.body}</p>\r\n                    </div>\r\n                </div>\r\n            })\r\n            : <div className={styles.chooseOpponent}>Выберите собеседника</div>}\r\n            <div ref={divRef}></div> {/* for autosrolling to this div */}\r\n    </div>\r\n}\r\n\r\n\r\ntype TProps = {\r\n    messages: TOpponentMessages[]\r\n    currentOpponent: TOpponent\r\n    authProfile: TUserProfile\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Opponents_wrapper__hQ2hv\",\"opponent\":\"Opponents_opponent__CR2-s\",\"name\":\"Opponents_name__6c2SM\",\"photo\":\"Opponents_photo__vWuss\"};","import React, { FC } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { TOpponent } from '../../../api/dialogsAPI';\r\nimport { actionCreators, getDialogWithOpponent } from '../../../store/reducers/dialogsReducer';\r\nimport userImage from '../../../assets/images/user.png';\r\nimport styles from './Opponents.module.css';\r\n\r\nexport const Opponents: FC<TProps> = ({ opponents }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClick = (opponent: TOpponent) => {\r\n        dispatch(getDialogWithOpponent(opponent.id))\r\n        dispatch(actionCreators.setCurrentOpponent(opponent))\r\n    }\r\n\r\n    return <div className={styles.wrapper}>\r\n        {opponents.map(o => {\r\n            return <div key={o.id} onClick={() => handleClick(o)} className={styles.opponent}>\r\n                <img src={o.photos.small || userImage} alt={o.userName} className={styles.photo} width='30px' />\r\n                <p className={styles.name}>{o.userName}</p>\r\n            </div>\r\n        })}\r\n    </div>\r\n}\r\n\r\n\r\ntype TProps = {\r\n    opponents: TOpponent[]\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__pxitv\",\"dialogList\":\"Dialogs_dialogList__oBjP2\",\"messages\":\"Dialogs_messages__bT+pv\"};","import React, { ComponentType, FC, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport withNavigateToLogin from \"../../hoc/withNavigateToLogin\";\r\nimport { getDialogsOpponents } from \"../../store/reducers/dialogsReducer\";\r\nimport { getUserProfileThunk } from \"../../store/reducers/userProfileReducer\";\r\nimport { getAuthUserId } from \"../../store/selectors/authSelector\";\r\nimport { getCurrentOpponentSelector, getOpponentMessagesSelector, getOpponentsSelector } from \"../../store/selectors/dialogsSelector\";\r\nimport { getUserProfile } from \"../../store/selectors/userProfileSelector\";\r\nimport { InputField } from \"./InputField/InputField\";\r\nimport { Messages } from \"./Messages/Messages\";\r\nimport { Opponents } from \"./Opponents/Opponents\";\r\nimport styles from './Dialogs.module.css';\r\n\r\nconst Dialogs: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const authProfile = useSelector(getUserProfile)\r\n    const currentOpponent = useSelector(getCurrentOpponentSelector)\r\n    const messages = useSelector(getOpponentMessagesSelector)\r\n    const opponents = useSelector(getOpponentsSelector)\r\n    const authId = useSelector(getAuthUserId)\r\n    useEffect(() => {\r\n        dispatch(getDialogsOpponents())\r\n        dispatch(getUserProfileThunk(authId))\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogList}>\r\n                <Opponents opponents={opponents} />\r\n            </div>\r\n            <div className={styles.messages}>\r\n                <Messages messages={messages}\r\n                    currentOpponent={currentOpponent}\r\n                    authProfile={authProfile}\r\n                />\r\n                <InputField currentOpponent={currentOpponent} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    withNavigateToLogin\r\n)(Dialogs)"],"names":["InputField","currentOpponent","dispatch","useDispatch","initialValues","textarea","onSubmit","values","resetForm","sendMessage","id","className","styles","type","name","placeholder","Messages","messages","authProfile","divRef","useRef","useEffect","current","scrollIntoView","scrollToBottom","map","m","to","senderId","src","photos","small","userImage","alt","width","senderName","body","ref","Opponents","opponents","o","onClick","opponent","getDialogWithOpponent","actionCreators","userName","compose","withNavigateToLogin","useSelector","getUserProfile","getCurrentOpponentSelector","getOpponentMessagesSelector","getOpponentsSelector","authId","getAuthUserId","getDialogsOpponents","getUserProfileThunk"],"sourceRoot":""}