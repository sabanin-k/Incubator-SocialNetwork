{"version":3,"file":"static/js/56.4427aa62.chunk.js","mappings":"uLAEaA,EAAU,SAACC,GAAD,OAAwBA,EAAMC,SAASC,MACjDC,EAAgB,SAACH,GAAD,OAAyBA,EAAMC,SAASG,YACxDC,EAAgB,SAACL,GAAD,OAAyBA,EAAMC,SAASK,YACxDC,EAAsB,SAACP,GAAD,OAAyBA,EAAMC,SAASO,UAC9DC,EAA4B,SAACT,GAAD,OAAyBA,EAAMC,SAASS,gB,oBCLjF,GAAgB,YAAc,0BAA0B,KAAO,mBAAmB,IAAM,kBAAkB,QAAU,sBAAsB,aAAe,2BAA2B,YAAc,2B,SCiElM,EA1DyB,SAAC,GAAsC,IAApCR,EAAmC,EAAnCA,KAAMI,EAA6B,EAA7BA,WAAYK,EAAiB,EAAjBA,WACpCC,GAAWC,EAAAA,EAAAA,MACXC,EAAgB,SAACC,GACfA,EAAEC,OAAOC,gBAAgBC,cAAgBH,EAAEC,OAAOC,gBAAgBE,UAAYC,OAAOC,aAAe,KACpGT,EAASU,EAAAA,GAAAA,mBAAiC,MAIlDC,EAAAA,EAAAA,YAAU,WAEN,OADAC,SAASC,iBAAiB,SAAUX,GAC7B,kBAAMU,SAASE,oBAAoB,SAAUZ,MACrD,IAEH,IAAMa,EAAc,SAACC,GACjB,OACI,uBAAIA,KAINC,EAAgB,SAACC,EAAYF,EAAiBG,GAChD,OACI,iCACI,iBAAMC,UAAWC,EAAAA,YAAoBC,QAAS,SAACC,GAC3CA,EAAMC,iBACNzB,EAAWmB,IAFf,SAGIC,IACHJ,EAAYC,OAKzB,OACI,iCACI,oBAASI,UAAWC,EAAAA,YAApB,SACK/B,EAAKmC,KAAI,SAAAC,GACN,OACI,eAAmBC,KAAMD,EAAKE,KAAMR,UAAWC,EAAAA,KAAajB,OAAO,SAASyB,IAAI,aAAhF,WAEI,gBAAKC,IAAKJ,EAAKK,WAAaC,EAAWC,IAAI,OAAOb,UAAWC,EAAAA,OAE7D,iBAAKD,UAAWC,EAAAA,QAAhB,WACI,cAAGD,UAAWC,EAAAA,OAAd,SAA8BK,EAAKQ,SACnC,iBAAMd,UAAWC,EAAAA,aAAjB,SAAuCK,EAAKS,WAC5C,gBAAKf,UAAWC,EAAAA,QAAhB,SAC0B,OAArBK,EAAKU,cAA0B1C,EAAW2C,SAASX,EAAKE,MAEnDX,EAAcS,EAAKE,KAAMF,EAAKU,YAAa,wCAD3CnB,EAAcS,EAAKE,KAAM,GAAI,4DATvCF,EAAKE,YAkBzB,SAACU,EAAA,EAAD,QCzBZ,GAAeC,EAAAA,EAAAA,KARS,SAACnD,GAAD,MAA0B,CAC9CE,KAAMH,EAAQC,GACdI,WAAYD,EAAcH,GAC1BM,WAAYD,EAAcL,GAC1BQ,SAAUD,EAAoBP,GAC9BU,eAAgBD,EAA0BT,MAGN,CAAEoD,aAAAA,EAAAA,GAAczC,WAAAA,EAAAA,IAAxD,EA5BkC,SAAC,GAA0F,IAAxFyC,EAAuF,EAAvFA,aAAchD,EAAyE,EAAzEA,WAAYF,EAA6D,EAA7DA,KAAMI,EAAuD,EAAvDA,WAAYK,EAA2C,EAA3CA,WAAYH,EAA+B,EAA/BA,SAAUE,EAAqB,EAArBA,eAQnG,OAPAa,EAAAA,EAAAA,YAAU,WACFb,GACA0C,EAAa5C,KAGlB,CAACE,KAGA,8BACKN,GACK,SAACiD,EAAA,EAAD,KACA,SAAC,EAAD,CACEnD,KAAMA,EACNI,WAAYA,EACZK,WAAYA,U","sources":["store/selectors/newsSelector.ts","webpack://kamas/./src/pages/News/News.module.css?f02f","pages/News/News.tsx","pages/News/NewsContainer.tsx"],"sourcesContent":["import { TGlobalState } from \"../reduxStore\";\r\n\r\nexport const getNews = (state: TGlobalState)=> state.newsPage.news;\r\nexport const getIsFetching = (state: TGlobalState) => state.newsPage.isFetching;\r\nexport const getHasContent = (state: TGlobalState) => state.newsPage.hasContent;\r\nexport const getNextPageSelector = (state: TGlobalState) => state.newsPage.nextPage\r\nexport const getScrollFetchingSelector = (state: TGlobalState) => state.newsPage.scrollFetching","// extracted by mini-css-extract-plugin\nexport default {\"newsSection\":\"News_newsSection__+5GiB\",\"link\":\"News_link__0Jp5K\",\"img\":\"News_img__rWrEk\",\"textDiv\":\"News_textDiv__S0MsK\",\"calendarData\":\"News_calendarData__tvUt8\",\"contentSpan\":\"News_contentSpan__Eh7lW\"};","import React, { FC, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TNews } from \"../../api/newsAPI\";\r\nimport newspaper from \"../../assets/images/newspaper.png\";\r\nimport { UpButton } from \"../../components/common/UpButton/UpButton\";\r\nimport { actionCreators } from \"../../store/reducers/newsReducer\";\r\nimport styles from \"./News.module.css\";\r\n\r\nconst News: FC<TProps> = ({ news, hasContent, getContent }) => {\r\n    const dispatch = useDispatch()\r\n    const scrollHandler = (e: any ) => {\r\n        if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100) {\r\n            dispatch(actionCreators.setScrollFetching(true))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('scroll', scrollHandler)\r\n        return () => document.removeEventListener('scroll', scrollHandler)\r\n    }, [])\r\n\r\n    const showContent = (content: string) => {\r\n        return (\r\n            <p>{content}</p>\r\n        )\r\n    }\r\n\r\n    const toggleContent = (id: string, content: string, text: string) => {\r\n        return (\r\n            <>\r\n                <span className={styles.contentSpan} onClick={(event) => {\r\n                    event.preventDefault();\r\n                    getContent(id)\r\n                }}>{text}</span>\r\n                {showContent(content)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className={styles.newsSection}>\r\n                {news.map(item => {\r\n                    return (\r\n                        <a key={item.link} href={item.link} className={styles.link} target='_blank' rel='noreferrer'>\r\n                            {/* <div className={styles.imgDiv}> */}\r\n                            <img src={item.image_url || newspaper} alt=\"news\" className={styles.img} />\r\n                            {/* </div> */}\r\n                            <div className={styles.textDiv}>\r\n                                <p className={styles.phrase}>{item.title}</p>\r\n                                <span className={styles.calendarData}>{item.pubDate}</span>\r\n                                <div className={styles.content}>\r\n                                    {item.description !== null && (!hasContent.includes(item.link)\r\n                                        ? toggleContent(item.link, '', 'Показать')\r\n                                        : toggleContent(item.link, item.description, 'Убрать'))}\r\n                                        \r\n                                </div>\r\n                            </div>\r\n                        </a>\r\n                    )\r\n                })}\r\n            </section>\r\n            <UpButton />\r\n        </>)\r\n}\r\n\r\nexport default News;\r\n\r\n\r\ntype TProps = {\r\n    news: TNews[]\r\n    hasContent: string[]\r\n    getContent: (id: string) => void\r\n}","import React, { FC, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { TNews } from \"../../api/newsAPI\";\r\nimport { Preloader } from \"../../components/common/Preloader/Preloader\";\r\nimport { getContent, getNewsThunk } from '../../store/reducers/newsReducer';\r\nimport { TGlobalState } from \"../../store/reduxStore\";\r\nimport { getHasContent, getIsFetching, getNews, getNextPageSelector, getScrollFetchingSelector } from \"../../store/selectors/newsSelector\";\r\nimport News from './News';\r\n\r\nconst NewsContainer: FC<TProps> = ({ getNewsThunk, isFetching, news, hasContent, getContent, nextPage, scrollFetching }) => {\r\n    useEffect(() => {\r\n        if (scrollFetching) {\r\n            getNewsThunk(nextPage)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [scrollFetching])\r\n\r\n    return (\r\n        <>\r\n            {isFetching\r\n                ? <Preloader />\r\n                : <News\r\n                    news={news}\r\n                    hasContent={hasContent}\r\n                    getContent={getContent} />}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: TGlobalState) => ({\r\n    news: getNews(state),\r\n    isFetching: getIsFetching(state),\r\n    hasContent: getHasContent(state),\r\n    nextPage: getNextPageSelector(state),\r\n    scrollFetching: getScrollFetchingSelector(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, { getNewsThunk, getContent })(NewsContainer);\r\n\r\n\r\ntype TProps = {\r\n    isFetching: boolean\r\n    news: TNews[]\r\n    hasContent: string[]\r\n    nextPage: number\r\n    scrollFetching: boolean\r\n    getContent: () => void\r\n    getNewsThunk: (page: number) => Promise<void>\r\n}"],"names":["getNews","state","newsPage","news","getIsFetching","isFetching","getHasContent","hasContent","getNextPageSelector","nextPage","getScrollFetchingSelector","scrollFetching","getContent","dispatch","useDispatch","scrollHandler","e","target","documentElement","scrollHeight","scrollTop","window","innerHeight","actionCreators","useEffect","document","addEventListener","removeEventListener","showContent","content","toggleContent","id","text","className","styles","onClick","event","preventDefault","map","item","href","link","rel","src","image_url","newspaper","alt","title","pubDate","description","includes","UpButton","connect","getNewsThunk","Preloader"],"sourceRoot":""}