{"version":3,"file":"static/js/423.090c0c9a.chunk.js","mappings":"2LAEaA,EAA0B,SAACC,GAAD,OAAyBA,EAAMC,KAAKC,UAC9DC,EAA+B,SAACH,GAAD,OAAyBA,EAAMC,KAAKG,e,SCFhF,GAAgB,QAAU,+BAA+B,SAAW,iC,SCGvDC,EAA2B,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,kBAAmBF,EAAoB,EAApBA,cAC1D,GAA0BG,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAOA,OAAO,iBAAKC,UAAWC,EAAAA,QAAhB,WACH,qBAAUH,MAAOA,EAAOI,SAPP,SAACC,GAAD,OAA+CJ,EAASI,EAAEC,OAAON,QAOlCE,UAAWC,EAAAA,SAAiBI,YAAY,4EACxF,mBAAQC,SAA4B,eAAlBZ,GAAmD,IAAjBI,EAAMS,OAAeC,QAPzD,WAChBZ,EAAkBE,GAClBC,EAAS,KAKsFC,UAAWC,EAAAA,OAA1G,SACwB,eAAlBP,EACI,sDACiB,IAAjBI,EAAMS,OACF,iCACA,+D,oBClBtB,GAAgB,SAAW,2BAA2B,QAAU,0BAA0B,MAAQ,wBAAwB,KAAO,uBAAuB,QAAU,0BAA0B,KAAO,wBCMtLE,EAAuB,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SACnC,GAAwCK,EAAAA,EAAAA,WAAS,GAAjD,eAAOa,EAAP,KAAqBC,EAArB,KACMC,GAASC,EAAAA,EAAAA,QAAO,MAChBC,GAAYD,EAAAA,EAAAA,QAAO,MAqBzB,OALAE,EAAAA,EAAAA,kBAAgB,WACRL,GAXe,WACnB,IAAMM,EAAcC,SAASC,eAAe,eAC5CF,EAAYG,SAAS,CAAEC,IAAKJ,EAAYK,eAStBC,KAEnB,CAAC9B,KAEG,gBAAKQ,UAAWC,EAAAA,SAAiBsB,SAXnB,WACjBT,EAAUU,QAAQH,aAAeP,EAAUU,QAAQC,UAAY,IACzDd,GAAgB,GAChBA,GAAgB,IAQsCe,IAAKZ,EAAWa,GAAG,cAA5E,SACW,OAAbnC,GAAyC,IAApBA,EAASe,OAC7Bf,EAASoC,KAAI,SAACC,EAAGC,GACf,OAAO,iBAAa9B,UAAWC,EAAAA,QAAxB,WACH,gBAAKD,UAAWC,EAAAA,aAAhB,UACI,SAAC,KAAD,CAAM8B,GAAI,UAAYF,EAAEG,OAAxB,SACKH,EAAEI,OACD,gBAAKC,IAAKL,EAAEI,MAAOE,IAAKN,EAAEO,SAAUC,MAAM,OAAOrC,UAAWC,EAAAA,SAC5D,gBAAKiC,IAAKI,EAAWH,IAAKN,EAAEO,SAAUC,MAAM,OAAOrC,UAAWC,EAAAA,aAGxE,iBAAKD,UAAWC,EAAAA,eAAhB,WACI,cAAGD,UAAWC,EAAAA,KAAd,SAA4B4B,EAAEO,YAC9B,cAAGpC,UAAWC,EAAAA,QAAd,SAA+B4B,EAAEU,cAErC,gBAAKb,IAAKd,IAZP,MAAUkB,OAenB,cAAG9B,UAAWC,EAAAA,KAAd,0FClBV,EAvBqB,WACjB,IAAMT,GAAWgD,EAAAA,EAAAA,IAAYnD,GACvBoD,GAAWD,EAAAA,EAAAA,IAAYE,EAAAA,IACvBhD,GAAgB8C,EAAAA,EAAAA,IAAY/C,GAC5BkD,GAAWC,EAAAA,EAAAA,MAWjB,OAPAC,EAAAA,EAAAA,YAAU,WAEN,OADAF,GAASG,EAAAA,EAAAA,OACF,WACHH,GAASI,EAAAA,EAAAA,UAEd,CAACJ,KAGA,iCACKK,EAAAA,EAAAA,UAAQ,WAAQ,OAAO,SAACvC,EAAD,CAAUjB,SAAUA,MAAe,CAACA,IAC3DiD,IAAY,SAAC9C,EAAD,CAAcC,kBAbT,SAAC2C,GACvBI,GAASM,EAAAA,EAAAA,IAAYV,KAYgD7C,cAAeA","sources":["store/selectors/chatSelector.ts","webpack://kamas/./src/pages/ChatPage/InputMessage/InputMessages.module.css?da36","pages/ChatPage/InputMessage/InputMessage.tsx","webpack://kamas/./src/pages/ChatPage/Messages/Messages.module.css?8abf","pages/ChatPage/Messages/Messages.tsx","pages/ChatPage/ChatPage.tsx"],"sourcesContent":["import { TGlobalState } from \"../reduxStore\"\r\n\r\nexport const getChatMessagesSelector = (state: TGlobalState) => state.chat.messages\r\nexport const getChatConnectStatusSelector = (state: TGlobalState) => state.chat.connectStatus","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"InputMessages_wrapper__QV6Sl\",\"textarea\":\"InputMessages_textarea__-z9A1\"};","import React, { FC, useState } from 'react'\r\nimport { TStatus } from '../../../api/wsAPI'\r\nimport styles from './InputMessages.module.css'\r\n\r\nexport const InputMessage: FC<TProps> = ({ handleSendMessage, connectStatus }) => {\r\n    const [value, setValue] = useState('')\r\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => setValue(e.target.value)\r\n    const handleClick = () => {\r\n        handleSendMessage(value)\r\n        setValue('')\r\n    }\r\n    \r\n    return <div className={styles.wrapper}>\r\n        <textarea value={value} onChange={handleChange} className={styles.textarea} placeholder='Начни писать...'/>\r\n        <button disabled={connectStatus === 'connecting' || value.length === 0 } onClick={handleClick} className={styles.button}>\r\n            { connectStatus === 'connecting'\r\n                ? 'Загрузка...'\r\n                : value.length === 0\r\n                    ? 'Пусто'\r\n                    : 'Отправить' }\r\n            </button>\r\n    </div>\r\n}\r\n\r\n\r\ntype TProps = { \r\n    connectStatus: TStatus\r\n    handleSendMessage: (message: string) => void\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__rACvG\",\"wrapper\":\"Messages_wrapper__7zJaQ\",\"photo\":\"Messages_photo__FXBKR\",\"name\":\"Messages_name__ciu+K\",\"message\":\"Messages_message__CNk5T\",\"plug\":\"Messages_plug__Kj8Tl\"};","import React, { FC, useLayoutEffect, useRef, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { TMessages } from '../../../api/wsAPI'\r\nimport userImage from '../../../assets/images/user.png'\r\nimport { lineBreaker } from '../../../helpers/lineBreaker'\r\nimport styles from './Messages.module.css'\r\n\r\nexport const Messages: FC<TProps> = ({ messages }) => {\r\n    const [scrollActive, setScrollActive] = useState(true)\r\n    const divRef = useRef(null)\r\n    const scrollRef = useRef(null)\r\n\r\n    // НИ ЭТОТ, НИ ВТОРОЙ СКРОЛЛЫ НЕ СПУСКАЮТСЯ ДО САМОГО НИЗА И ОНИ МЕНЯ ЗАЕБАЛИ УЖЕ. ПОШЕЛ НАХУЙ, СКРОЛЛ!\r\n    // const scrollToBottom = () => {\r\n    //     divRef.current?.scrollIntoView()\r\n    // }\r\n    const scrollToBottom = () => {\r\n        const scrolledDiv = document.getElementById('scrolledDiv')\r\n        scrolledDiv.scrollTo({ top: scrolledDiv.scrollHeight })\r\n    }\r\n    const handleScroll = () => {        \r\n        scrollRef.current.scrollHeight - scrollRef.current.scrollTop > 680\r\n            ? setScrollActive(false)\r\n            : setScrollActive(true)\r\n    }\r\n\r\n    useLayoutEffect(() => {\r\n        if (scrollActive) scrollToBottom()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [messages])\r\n\r\n    return <div className={styles.messages} onScroll={handleScroll} ref={scrollRef} id='scrolledDiv'>\r\n        {messages !== null && messages.length !== 0\r\n        ? messages.map((m, i) => {            \r\n            return <div key={i} className={styles.wrapper}>\r\n                <div className={styles.photoWrapper}>\r\n                    <Link to={'/users/' + m.userId}>\r\n                        {m.photo\r\n                        ? <img src={m.photo} alt={m.userName} width='50px' className={styles.photo} />\r\n                        : <img src={userImage} alt={m.userName} width='50px' className={styles.photo} />}\r\n                    </Link>\r\n                </div>\r\n                <div className={styles.messageWrapper}>\r\n                    <b className={styles.name}>{m.userName}</b>\r\n                    <p className={styles.message}>{m.message}</p>\r\n                </div>\r\n                <div ref={divRef}></div> {/* for autosrolling to this div */}\r\n            </div>\r\n        })\r\n        : <p className={styles.plug}>Нет сообщений</p> }\r\n    </div>\r\n} \r\n\r\n\r\ntype TProps = { messages: TMessages[] }","import React, { FC, useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sendMessage, startChatListener, stopChatListener } from '../../store/reducers/chatReducer'\r\nimport { getIsLogged } from '../../store/selectors/authSelector'\r\nimport { getChatConnectStatusSelector, getChatMessagesSelector } from '../../store/selectors/chatSelector'\r\nimport { InputMessage } from './InputMessage/InputMessage'\r\nimport { Messages } from './Messages/Messages'\r\n\r\nconst ChatPage: FC = () => {\r\n    const messages = useSelector(getChatMessagesSelector)\r\n    const isLogged = useSelector(getIsLogged)\r\n    const connectStatus = useSelector(getChatConnectStatusSelector)\r\n    const dispatch = useDispatch()\r\n    const handleSendMessage = (message: string) => {\r\n        dispatch(sendMessage(message))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(startChatListener())\r\n        return () => {\r\n            dispatch(stopChatListener())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            {useMemo(() => { return <Messages messages={messages} />}, [messages])}\r\n            {isLogged && <InputMessage handleSendMessage={handleSendMessage} connectStatus={connectStatus} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"names":["getChatMessagesSelector","state","chat","messages","getChatConnectStatusSelector","connectStatus","InputMessage","handleSendMessage","useState","value","setValue","className","styles","onChange","e","target","placeholder","disabled","length","onClick","Messages","scrollActive","setScrollActive","divRef","useRef","scrollRef","useLayoutEffect","scrolledDiv","document","getElementById","scrollTo","top","scrollHeight","scrollToBottom","onScroll","current","scrollTop","ref","id","map","m","i","to","userId","photo","src","alt","userName","width","userImage","message","useSelector","isLogged","getIsLogged","dispatch","useDispatch","useEffect","startChatListener","stopChatListener","useMemo","sendMessage"],"sourceRoot":""}